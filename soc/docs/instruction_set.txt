*******************************************************************************************************************
Type: R-I
LDI     DDDD IIIIIIII 0001      rd <= i                                                                1 cycle
ANI     DDDD IIIIIIII 0011      rd <= rd & i                                                           1 cycle
ORI     DDDD IIIIIIII 0101      rd <= rd | i                                                           1 cycle
XOI     DDDD IIIIIIII 0111      rd <= rd ^ i                                                           1 cycle
ADI     DDDD IIIIIIII 1001      rd <= rd + i                                                           1 cycle
ACI     DDDD IIIIIIII 1011      rd <= rd + i + carryFlag                                               1 cycle
CPI     DDDD IIIIIIII 1101      (z <= 1, if rd == i), (c <= 1 if rd < i), (n <= 1, if rd > i)          1 cycle
*******************************************************************************************************************
Type: R-L   
IN      DDDD LLLLLLLL 0010      rd <= *l                                                               2 cycles
OUT     SSSS LLLLLLLL 0100      *l <= rd                                                               2 cycles
*******************************************************************************************************************
Type: R-R
AND     DDDD SSSS 00001000      rd <= rd & rs                                                          1 cycle
OR      DDDD SSSS 00010000      rd <= rd | rs                                                          1 cycle
XOR     DDDD SSSS 00011000      rd <= rd ^ rs                                                          1 cycle
ADD     DDDD SSSS 00100000      rd <= rd + rs                                                          1 cycle
ADC     DDDD SSSS 00101000      rd <= rd + rs + carryFlag                                              1 cycle
CMP     DDDD SSSS 00110000      (z <= 1, if rd == rs), (c <= 1 if rd < rs), (n <= 1, if rd > rs)       1 cycle
SUB     DDDD SSSS 00111000      rd <= rd - rs                                                          1 cycle
SBB     DDDD SSSS 01000000      rd <= rd - rs - carryFlag                                              1 cycle
MOV     DDDD SSSS 01001000      rd <= rs                                                               1 cycle
*******************************************************************************************************************
Type: R
NOT     DDDD 0000 01010000      rd <= ~rd                                                              1 cycle
SLL     DDDD 0000 01011000      rd <= rd << 1                                                          1 cycle
SRL     DDDD 0000 01100000      rd <= rd >> 1                                                          1 cycle
SRA     DDDD 0000 01101000      rd <= rd >>> 1                                                         1 cycle
*******************************************************************************************************************
Type: R-RP
STR     SSSS PPPP 01110000      *p <= rs                                                               1 cycle
SRI     SSSS PPPP 01111000      *p <= rs, p <= p + 1                                                   1 cycle
SRD     SSSS PPPP 10000000      *p <= rs, p <= p - 1                                                   1 cycle
LDR     DDDD PPPP 10001000      rd <= *p                                                               2 cycles
LRI     DDDD PPPP 10010000      rd <= *p, p <= p + 1                                                   2 cycles
LRD     DDDD PPPP 10011000      rd <= *p, p <= p - 1                                                   2 cycles
*******************************************************************************************************************
Type: RP
IRP     0000 PPPP 10100000      p <= p + 1                                                             1 cycle
DRP     0000 PPPP 10101000      p <= p - 1                                                             1 cycle

JMPI    0000 PPPP 10110000      pc <= p                                                                1 cycle
JCI     0010 PPPP 10110000      pc <= p, if carryFlag                                                  1 cycle
JNCI    0100 PPPP 10110000      pc <= p, if !carryFlag                                                 1 cycle
JZI     0110 PPPP 10110000      pc <= p, if zeroFlag                                                   1 cycle
JNZI    1000 PPPP 10110000      pc <= p, if !zeroFlag                                                  1 cycle
JNI     1010 PPPP 10110000      pc <= p, if negativeFlag                                               1 cycle
JNNI    1100 PPPP 10110000      pc <= p, if !negativeFlag                                              1 cycle
*******************************************************************************************************************
Type: Absolute Address
JMP     0000 0000 10111000      pc <= a                                                                2 cycles
        AAAA AAAA AAAAAAAA

JC      0010 0000 10111000      pc <= a, if carryFlag                                                  1-2 cycles
        AAAA AAAA AAAAAAAA

JNC     0100 0000 10111000      pc <= a, if !carryFlag                                                 1-2 cycles
        AAAA AAAA AAAAAAAA

JZ      0110 0000 10111000      pc <= a, if zeroFlag                                                   1-2 cycles
        AAAA AAAA AAAAAAAA

JNZ     1000 0000 10111000      pc <= a, if !zeroFlag                                                  1-2 cycles
        AAAA AAAA AAAAAAAA

JN      1010 0000 10111000      pc <= a, if negativeFlag                                               1-2 cycles
        AAAA AAAA AAAAAAAA

JNN     1100 0000 10111000      pc <= a, if !negativeFlag                                              1-2 cycles
        AAAA AAAA AAAAAAAA

CALL    0000 0000 11000000      stack.push(pc[7:0]); stack.push(pc[15:8]); pc <= a,                    2 cycles
        AAAA AAAA AAAAAAAA

CC      0010 0000 11000000      stack.push(pc[7:0]); stack.push(pc[15:8]); pc <= a, if carryFlag       1-2 cycles
        AAAA AAAA AAAAAAAA

CNC     0100 0000 11000000      stack.push(pc[7:0]); stack.push(pc[15:8]); pc <= a, if !carryFlag      1-2 cycles
        AAAA AAAA AAAAAAAA

CZ      0110 0000 11000000      stack.push(pc[7:0]); stack.push(pc[15:8]); pc <= a, if zero            1-2 cycles
        AAAA AAAA AAAAAAAA

CNZ     1000 0000 11000000      stack.push(pc[7:0]); stack.push(pc[15:8]); pc <= a, if !zero           1-2 cycles
        AAAA AAAA AAAAAAAA

CN      1010 0000 11000000      stack.push(pc[7:0]); stack.push(pc[15:8]); pc <= a, if negativeFlag    1-2 cycles
        AAAA AAAA AAAAAAAA

CNN     1100 0000 11000000      stack.push(pc[7:0]); stack.push(pc[15:8]); pc <= a, if !negativeFlag   1-2 cycles
        AAAA AAAA AAAAAAAA
*******************************************************************************************************************
Type: No Args
RET     0000 0000 11001000      pc[15:8] <= stack.pop(); pc[7:0] <= stack.pop()                        3 cycles
RC      0010 0000 11001000      pc[15:8] <= stack.pop(); pc[7:0] <= stack.pop(), if carry              1-3 cycles
RNC     0100 0000 11001000      pc[15:8] <= stack.pop(); pc[7:0] <= stack.pop(), if !carry             1-3 cycles
RZ      0110 0000 11001000      pc[15:8] <= stack.pop(); pc[7:0] <= stack.pop(), if zero               1-3 cycles
RNZ     1000 0000 11001000      pc[15:8] <= stack.pop(); pc[7:0] <= stack.pop(), if !zero              1-3 cycles
RN      1010 0000 11001000      pc[15:8] <= stack.pop(); pc[7:0] <= stack.pop(), if negativeFlag       1-3 cycles
RNN     1100 0000 11001000      pc[15:8] <= stack.pop(); pc[7:0] <= stack.pop(), if !negativeFlag      1-3 cycles

PUS     0000 0000 11010000      stack.push(statusRegister)                                             1 cycle
POS     0000 0000 11011000      statusRegister <= stack.pop()                                          2 cycles
HLT     0000 0000 11110000                                                                             1 cycle
NOP     0000 0000 00000000                                                                             1 cycle
*******************************************************************************************************************
Type: Mask
SSR     0000 MMMM 11100000      statusRegister <= statusRegister | m                                   1 cycle
CSR     0000 MMMM 11101000      statusRegister <= statusRegister & m                                   1 cycle
*******************************************************************************************************************